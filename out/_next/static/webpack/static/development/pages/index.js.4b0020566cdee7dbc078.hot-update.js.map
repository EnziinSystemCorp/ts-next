{"version":3,"file":"static/webpack/static/development/pages/index.js.4b0020566cdee7dbc078.hot-update.js","sources":["webpack:///./src/containers/home/HomeComponent.tsx"],"sourcesContent":["// - Import react components\r\nimport Link from 'next/link';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from 'classnames';\r\nimport ChatComponent from '~/components/chat/ChatComponent';\r\nimport Router from 'next/router'\r\nimport { Map } from 'immutable';\r\nimport React, { Component } from 'react';\r\nconst CookieConsent = require('react-cookie-consent');\r\nimport { withTranslation } from '~/locales/i18n';\r\nimport IdleTimer from 'react-idle-timer'\r\nimport { connect } from 'react-redux';\r\nimport TelarTextLogo from '~/layouts/telarTextLogo';\r\nimport { withRouter } from 'next/router';\r\nimport HomeHeader from '~/components/homeHeader/HomeHeaderComponent';\r\nimport * as chatActions from '~/store/actions/chatActions';\r\nimport * as globalActions from '~/store/actions/globalActions';\r\n\r\nimport { homeStyles } from './homeStyles';\r\nimport { IHomeComponentProps } from './IHomeComponentProps';\r\nimport { IHomeComponentState } from './IHomeComponentState';\r\nimport { menuItems } from './menuItems';\r\n\r\n\r\nexport class HomeComponent extends Component<IHomeComponentProps, IHomeComponentState> {\r\n\r\n  idleTimer: any\r\n  /**\r\n   * Portal Container\r\n   */\r\n  container: any = null\r\n\r\n  // Constructor\r\n  constructor(props: IHomeComponentProps) {\r\n    super(props)\r\n    this.idleTimer = React.createRef()\r\n\r\n    // Default state\r\n    this.state = {\r\n      drawerOpen: false\r\n    }\r\n\r\n    // Binding function to `this`\r\n    this.toggleChat = this.toggleChat.bind(this)\r\n    this.onActive = this.onActive.bind(this)\r\n    this.onIdle = this.onIdle.bind(this)\r\n  }\r\n\r\n  /**\r\n   * Handle drawer toggle\r\n   */\r\n  handleDrawerToggle = () => {\r\n    this.setState({ drawerOpen: !this.state.drawerOpen })\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  /**\r\n   * Toggle chat window to open/close\r\n   */\r\n  toggleChat() {\r\n    const { isChatOpen, openChat, closeChat } = this.props\r\n    if (isChatOpen) {\r\n      closeChat!()\r\n    } else {\r\n      openChat!()\r\n    }\r\n  }\r\n\r\n  onActive() {\r\n    console.log('time remaining', this.idleTimer.current.getRemainingTime())\r\n  }\r\n\r\n  onIdle() {\r\n    console.log('last active', this.idleTimer.current.getLastActiveTime())\r\n  }\r\n\r\n  /**\r\n   * Render DOM component\r\n   */\r\n  render() {\r\n    const { loaded, authed, showSendFeedback, t, classes, theme, isChatOpen } = this.props\r\n    const { drawerOpen } = this.state\r\n\r\n    const drawer = (\r\n      <div>\r\n        {\r\n          menuItems(this.props.uid!, showSendFeedback!).map((item: any, index) => {\r\n            if (item.path) {\r\n              return (<Link key={`home-menu-${index}`} href={item.path}>\r\n                <MenuItem style={{color: 'rgb(117, 117, 117)'}}>\r\n                  <ListItemIcon>\r\n                    {item.icon!}\r\n                  </ListItemIcon>\r\n                  <ListItemText key={`home-menu-${index}`} primary={item.label} />\r\n                </MenuItem>\r\n              </Link>)\r\n            } else if (item.onClick) {\r\n              return (\r\n                <MenuItem key={`home-menu-${index}`} onClick={item.onClick} style={{ color: 'rgb(117, 117, 117)' }}>\r\n                  <ListItemIcon>\r\n                    {item.icon!}\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={item.label} />\r\n                </MenuItem>\r\n              )\r\n            } else {\r\n              return <Divider key={`home-menu-divider${index}`} />\r\n            }\r\n\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n\r\n    const anchor = theme.direction === 'rtl' ? 'right' : 'left'\r\n    const mainElement = (\r\n      <div className={classes.root}>\r\n        <div className={classes.appFrame}>\r\n          <HomeHeader onToggleDrawer={this.handleDrawerToggle} drawerStatus={this.state.drawerOpen} />\r\n          <Hidden mdUp>\r\n            <Drawer\r\n              variant='temporary'\r\n              open={this.state.drawerOpen}\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n              onClose={this.handleDrawerToggle}\r\n              ModalProps={{\r\n                keepMounted: true, // Better open performance on mobile.\r\n              }}\r\n            >\r\n              <div>\r\n                <div className={classes.drawerHeader} >\r\n                  <TelarTextLogo viewBox='0 0 700 100' className={classes.logo}/>\r\n                </div>\r\n                <MenuList style={{ color: 'rgb(117, 117, 117)', width: '210px', paddingTop: '0px' }}>\r\n                  <Divider />\r\n                  {drawer}\r\n                </MenuList>\r\n              </div>\r\n            </Drawer>\r\n          </Hidden>\r\n          <Hidden smDown implementation='js'>\r\n            <Drawer\r\n              variant='persistent'\r\n              open={this.state.drawerOpen}\r\n              classes={{\r\n                paper: classes.drawerPaperLarge,\r\n              }}\r\n            >\r\n              <div>\r\n                <MenuList className={classes.menu} style={{ color: 'rgb(117, 117, 117)', width: '210px' }}>\r\n                  {drawer}\r\n                </MenuList>\r\n              </div>\r\n            </Drawer>\r\n          </Hidden>\r\n          <main\r\n            className={classNames(classes.content, classes[`content-${anchor}`], {\r\n              [classes.contentShift]: drawerOpen,\r\n              [classes[`contentShift-${anchor}`]]: drawerOpen,\r\n            })}\r\n          >\r\n            {this.props.children}\r\n          </main>\r\n        </div>\r\n\r\n        <ChatComponent open={isChatOpen!} onToggle={this.toggleChat} />\r\n\r\n      </div>\r\n    )\r\n    return (\r\n      <IdleTimer\r\n        ref={this.idleTimer}\r\n        onActive={this.onActive}\r\n        onIdle={this.onIdle}\r\n        timeout={1000 * 6}>\r\n\r\n        {mainElement}\r\n\r\n      </IdleTimer>\r\n    )\r\n  }\r\n}\r\n\r\n// - Map dispatch to props\r\nconst mapDispatchToProps = (dispatch: any, ownProps: IHomeComponentProps) => {\r\n\r\n  return {\r\n    openChat: () => dispatch(chatActions.openChat()),\r\n    closeChat: () => dispatch(chatActions.closeChat()),\r\n    loadData: () => dispatch(globalActions.loadInitialData()),\r\n    defaultDataDisable: () => {\r\n      dispatch(globalActions.defaultDataDisable())\r\n    },\r\n    defaultDataEnable: () => {\r\n      dispatch(globalActions.defaultDataEnable())\r\n    },\r\n    goTo: (url: string) => Router.push(url),\r\n    showSendFeedback: () => dispatch(globalActions.showSendFeedback()),\r\n    hideSendFeedback: () => dispatch(globalActions.hideSendFeedback())\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Map state to props\r\n */\r\nconst mapStateToProps = (state: Map<string, any>, ownProps: IHomeComponentProps) => {\r\n  const isChatOpen = state.getIn(['chat', 'chatOpen'])\r\n  const uid = state.getIn(['authorize', 'uid'], {})\r\n  const global = state.get('global', {})\r\n\r\n  return {\r\n    isChatOpen,\r\n    uid,\r\n    authed: state.getIn(['authorize', 'authed'], false),\r\n    global,\r\n    loaded: state.getIn(['user', 'loaded']) && state.getIn(['imageGallery', 'loaded']) && state.getIn(['circle', 'loaded']) && state.getIn(['global', 'defaultLoadDataStatus'])\r\n  }\r\n}\r\n\r\n// - Connect component to redux store\r\nconst translateWrapper = withTranslation('common')(HomeComponent as any)\r\n\r\nexport default withRouter<any, any>(connect(mapStateToProps, mapDispatchToProps)(withStyles(homeStyles as any, { withTheme: true })(translateWrapper as any) as any))\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;;;AAKA;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AACA;AADA;AAmBA;AAAA;AAAA;AACA;AACA;AAnBA;AACA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;AAZA;AAaA;AAEA;;;;;AAxBA;AAAA;AAAA;AAkCA;;;;AAlCA;AAAA;AAAA;AAqCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;AAAA;AA+CA;AACA;AAhDA;AAAA;AAAA;AAmDA;AACA;AAEA;;;;AAtDA;AAAA;AAAA;AAyhKA;AACA;AADA;AAAA;AACA;AAmKA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAeA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;A","sourceRoot":""}